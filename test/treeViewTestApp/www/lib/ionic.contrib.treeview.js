angular.module('ionic.contrib.TreeView', ['ionic']).directive("treeView", [
  "$animate", "$compile", "$timeout", function($animate, $compile, $timeout) {
    return {
      restrict: "E",
      require: ["^?$ionicScroll"],
      template: "<tree-item ng-style=\"{width: fullWidth}\" collection-item-width=\"'100%'\" collection-item-height=\"itemHeight\" collection-repeat=\"row in treeRows | filter:filterExpanded() track by row.id\" row=\"row\">{{row.name}}</tree-item>",
      scope: {
        onExpandChange: '&',
        onCheckboxChange: '&',
        onClick: '&',
        items: '=',
        showCheckboxes: '=',
        showNumbers: '=',
        fetchData: '=',
        hasMoreData: '=',
        itemHeight: '='
      },
      compile: function($element, $attr) {
        var infiniteScroll, listEl;
        listEl = angular.element("<div class=\"tree-view list\">").append($element.contents());
        infiniteScroll = angular.element("<ion-infinite-scroll ng-if=\"hasMoreData()\" on-infinite=\"fetchData()\" distance=\"1%\">");
        $element.append(listEl).append(infiniteScroll);
        return function($scope, $element, $attrs, ctrls) {
          var buildTreeRows, init, treeRows;
          treeRows = [];
          $scope.fullWidth = '100%';
          $scope.filterExpanded = function() {
            return function(row) {
              return row.$treeview.visible === true;
            };
          };
          buildTreeRows = function(items, level, number, visible) {
            var childrenVisible, index, item, rowNumber, _i, _len, _ref, _results;
            if ($attrs.scrollHeight) {
              if ((_ref = $element.parent()[0]) != null) {
                _ref.style.height = $attrs.scrollHeight;
              }
            }
            if (!number) {
              number = [];
            }
            _results = [];
            for (index = _i = 0, _len = items.length; _i < _len; index = ++_i) {
              item = items[index];
              rowNumber = number.slice();
              rowNumber.push(index + 1);
              if (!item.$treeview) {
                item.$treeview = {};
              }
              item.$treeview.level = level;
              item.$treeview.number = rowNumber;
              if (item.$treeview.showCheckbox === void 0) {
                item.$treeview.showCheckbox = null;
              }
              item.$treeview.visible = item.visible === false ? false : visible;
              if (item.$treeview.checked === void 0) {
                item.$treeview.checked = false;
              }
              item.$treeview.hideExpander = item.hideExpander !== void 0 ? item.hideExpander : false;
              if (item.expanded === void 0) {
                item.expanded = false;
              }
              treeRows.push(item);
              childrenVisible = visible && item.expanded;
              if (item.children) {
                _results.push(buildTreeRows(item.children, level + 1, rowNumber, childrenVisible));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
          init = function() {
            treeRows = [];
            buildTreeRows($scope.items, 0, null, true);
            return $scope.treeRows = treeRows;
          };
          $scope.$watch('items', init, true);
        };
      }
    };
  }
]);

angular.module('ionic.contrib.TreeView').controller("$treeView", ["$scope", "$attrs", "$parse", function($scope, $attrs, $parse) {}]);

var TreeView;

TreeView = ionic.views.View.inherit({
  initialize: function(opts) {
    var _this;
    return;
    _this = this;
    opts = ionic.extend({
      onReorder: function(el, oldIndex, newIndex) {},
      virtualRemoveThreshold: -200,
      virtualAddThreshold: 200,
      canSwipe: function() {
        return true;
      }
    }, opts);
    ionic.extend(this, opts);
    if (!this.itemHeight && this.listEl) {
      this.itemHeight = this.listEl.children[0] && parseInt(this.listEl.children[0].style.height, 10);
    }
    this.onRefresh = opts.onRefresh || function() {};
    this.onRefreshOpening = opts.onRefreshOpening || function() {};
    this.onRefreshHolding = opts.onRefreshHolding || function() {};
    window.ionic.onGesture("release", (function(e) {
      _this._handleEndDrag(e);
    }), this.el);
    window.ionic.onGesture("drag", (function(e) {
      _this._handleDrag(e);
    }), this.el);
    this._initDrag();
  },

  /**
  Called to tell the list to stop refreshing. This is useful
  if you are refreshing the list and are done with refreshing.
   */
  stopRefreshing: function() {
    var refresher;
    refresher = this.el.querySelector(".list-refresher");
    refresher.style.height = "0px";
  },

  /**
  If we scrolled and have virtual mode enabled, compute the window
  of active elements in order to figure out the viewport to render.
   */
  didScroll: function(e) {
    var first, highWater, itemHeight, itemsPerViewport, last, lowWater, nodes, scrollHeight, scrollTop, totalItems, viewportHeight;
    if (this.isVirtual) {
      itemHeight = this.itemHeight;
      totalItems = this.listEl.children.length;
      scrollHeight = e.target.scrollHeight;
      viewportHeight = this.el.parentNode.offsetHeight;
      scrollTop = e.scrollTop;
      highWater = Math.max(0, e.scrollTop + this.virtualRemoveThreshold);
      lowWater = Math.min(scrollHeight, Math.abs(e.scrollTop) + viewportHeight + this.virtualAddThreshold);
      itemsPerViewport = Math.floor((lowWater - highWater) / itemHeight);
      first = parseInt(Math.abs(highWater / itemHeight), 10);
      last = parseInt(Math.abs(lowWater / itemHeight), 10);
      this._virtualItemsToRemove = Array.prototype.slice.call(this.listEl.children, 0, first);
      nodes = Array.prototype.slice.call(this.listEl.children, first, first + itemsPerViewport);
      this.renderViewport && this.renderViewport(highWater, lowWater, first, last);
    }
  },
  didStopScrolling: function(e) {
    var el, i;
    if (this.isVirtual) {
      i = 0;
      while (i < this._virtualItemsToRemove.length) {
        el = this._virtualItemsToRemove[i];
        this.didHideItem && this.didHideItem(i);
        i++;
      }
    }
  },

  /**
  Clear any active drag effects on the list.
   */
  clearDragEffects: function() {
    if (this._lastDragOp) {
      this._lastDragOp.clean && this._lastDragOp.clean();
      this._lastDragOp = null;
    }
  },
  _initDrag: function() {
    this._lastDragOp = this._dragOp;
    this._dragOp = null;
  },
  _getItem: function(target) {
    while (target) {
      if (target.classList && target.classList.contains(ITEM_CLASS)) {
        return target;
      }
      target = target.parentNode;
    }
    return null;
  },
  _startDrag: function(e) {
    var didStart, item, lastDragOp, _this;
    _this = this;
    didStart = false;
    this._isDragging = false;
    lastDragOp = this._lastDragOp;
    item = void 0;
    if (ionic.DomUtil.getParentOrSelfWithClass(e.target, ITEM_REORDER_BTN_CLASS) && (e.gesture.direction === "up" || e.gesture.direction === "down")) {
      item = this._getItem(e.target);
      if (item) {
        this._dragOp = new ReorderDrag({
          listEl: this.el,
          el: item,
          scrollEl: this.scrollEl,
          scrollView: this.scrollView,
          onReorder: function(el, start, end) {
            _this.onReorder && _this.onReorder(el, start, end);
          }
        });
        this._dragOp.start(e);
        e.preventDefault();
      }
    } else if (!this._didDragUpOrDown && (e.gesture.direction === "left" || e.gesture.direction === "right") && Math.abs(e.gesture.deltaX) > 5) {
      item = this._getItem(e.target);
      if (item && item.querySelector(".item-options")) {
        this._dragOp = new SlideDrag({
          el: this.el,
          canSwipe: this.canSwipe
        });
        this._dragOp.start(e);
        e.preventDefault();
      }
    }
    if (lastDragOp && this._dragOp && !this._dragOp.isSameItem(lastDragOp) && e.defaultPrevented) {
      lastDragOp.clean && lastDragOp.clean();
    }
  },
  _handleEndDrag: function(e) {
    var _this;
    _this = this;
    this._didDragUpOrDown = false;
    if (!this._dragOp) {
      return;
    }
    this._dragOp.end(e, function() {
      _this._initDrag();
    });
  },

  /**
  Process the drag event to move the item to the left or right.
   */
  _handleDrag: function(e) {
    var buttons, content, _this;
    _this = this;
    content = void 0;
    buttons = void 0;
    if (Math.abs(e.gesture.deltaY) > 5) {
      this._didDragUpOrDown = true;
    }
    if (!this.isDragging && !this._dragOp) {
      this._startDrag(e);
    }
    if (!this._dragOp) {
      return;
    }
    e.gesture.srcEvent.preventDefault();
    this._dragOp.drag(e);
  }
});

angular.module('ionic.contrib.TreeView').directive("treeItem", [
  "$animate", "$compile", function($animate, $compile) {
    return {
      restrict: "E",
      controller: [
        "$scope", "$element", function($scope, $element) {
          $scope.toggle = function($event, row) {
            $event.stopPropagation();
            row.expanded = !row.expanded;
            return $scope.onExpandChange({
              row: row
            });
          };
          $scope.checkboxClick = function($event, row) {
            $event.stopPropagation();
            row.$treeview.checked = !row.$treeview.checked;
            return $scope.onCheckboxChange({
              row: row
            });
          };
          return $scope.rowClick = function(row) {
            return $scope.onClick({
              row: row
            });
          };
        }
      ],
      compile: function($element, $attrs) {
        var link;
        $element.addClass("item item-complex tree-item");
        link = function($scope, $element, $attrs) {
          var checkbox, chevron, containerLink, number, textContainer;
          $scope.getTreePadding = function(row) {
            var padding;
            padding = row.$treeview.level * 20;
            return {
              'padding-left': padding + 'px'
            };
          };
          $scope.getVisibility = function(row) {
            var _ref;
            if (row.$treeview.hideExpander) {
              return 'hidden';
            } else {
              if (((_ref = row.children) != null ? _ref.length : void 0) > 0) {
                return 'visible';
              } else {
                return 'hidden';
              }
            }
          };
          number = angular.element("<span ng-if=\"showNumbers\" class=\"tree-item-number\">{{row.$treeview.number.join('.')}}:</span>");
          checkbox = angular.element("<label ng-if=\"!(row.$treeview.showCheckbox || (showCheckboxes && row.$treeview.showCheckbox !== false))\" style=\"height: 28px; width: 1px; float: left; padding-left: 3px;\"></label> <label ng-if=\"row.$treeview.showCheckbox || (showCheckboxes && row.$treeview.showCheckbox !== false)\" class=\"checkbox\"><input type=\"checkbox\" ng-checked=\"row.$treeview.checked\" ng-click=\"checkboxClick($event, row)\"> </label>");
          containerLink = angular.element("<a class=\"item-content item-icon-right\" ng-class=\"{'tree-item-with-number': showNumbers, 'tree-item-with-checkbox': true}\" ng-click=\"rowClick(row)\" ng-style=\"getTreePadding(row)\" ></a>");
          chevron = angular.element("<a class=\"expand-button icon ion-chevron-down\" ng-class=\"{'tree-item-expanded': row.expanded}\" ng-style=\"{'visibility': getVisibility(row)}\" ng-click=\"toggle($event, row)\"></a>");
          textContainer = angular.element("<span class=\"tree-item-text\"></span>");
          textContainer.append($element.contents());
          containerLink.append(number);
          containerLink.append(checkbox);
          containerLink.append(textContainer).append(chevron);
          $element.append(containerLink);
          $compile(containerLink)($scope);
        };
        return link;
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;base64,